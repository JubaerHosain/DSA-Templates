1) gcd(i, N) = one of the divisor of N.
2) instead of running loop from 1 to N, we can check for each divisor d of N how many numbers are there with gcd(i,N) = d.

psudocode:

sum = 0;
cin >> q;
while(q--) {
  cin >> n;
  for(int i = 1; i*i <= n; i++) {
    if(n%i == 0) {
        d1 = i;
        d2 = n/i;
        sum += d1 * getcount(d1, n);
        if(d1 != d2)                      // for perfect squre divisor may duplicate, suppose 5*5 = 25
          sum += d2 * getcound(d2, n)
    }
  }
}

To answer each query in sqrt(n) time, the getcount(d, n) function should work in constant time: O(1).

now ,let's disscuss about getcount(d, n) function:
1) if gcd(i, n) = d then gcd(i/d, n/d) = 1.
2) let x1, x2, x3....are different integers from 1 to n such that gcd with n, gcd(xi, n) = d.
now, 1 <= xi <= n
 or, 1 <= xi/d <= n/d, this means the numbers xi <= n/d are co-prime with n/d. (implifies phi(n/d)).
 so cout getcont(d, n) returns phi[n/d].
 we can pre-calculate phi sieve to find phi[n/d] in constant time.
